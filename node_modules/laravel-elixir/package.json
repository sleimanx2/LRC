{
  "name": "laravel-elixir",
  "version": "0.10.1",
  "description": "Laravel Elixir Core",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/laravel/elixir"
  },
  "keywords": [
    "laravel",
    "elixir",
    "gulp"
  ],
  "author": {
    "name": "Taylor Otwell, Jeffrey Way"
  },
  "license": "MIT",
  "homepage": "https://github.com/laravel/elixir",
  "dependencies": {
    "del": "^0.1.3",
    "gulp-autoprefixer": "^1.0.1",
    "gulp-coffee": "^2.2.0",
    "gulp-concat": "^2.4.1",
    "gulp-filter": "^1.0.2",
    "gulp-if": "^1.2.5",
    "gulp-less": "^1.3.6",
    "gulp-load-plugins": "^0.7.0",
    "gulp-minify-css": "^0.3.10",
    "gulp-notify": "^1.8.0",
    "gulp-phpspec": "^0.3.0",
    "gulp-phpunit": "^0.6.3",
    "gulp-rename": "^1.2.0",
    "gulp-rev": "^2.0.0",
    "gulp-sass": "^1.1.0",
    "gulp-shell": "^0.2.9",
    "gulp-uglify": "^1.0.1",
    "gulp-util": "^3.0.1",
    "install": "^0.1.7",
    "main-bower-files": "^2.4.0",
    "npm": "^2.1.2",
    "parse-filepath": "^0.5.0",
    "require-dir": "^0.1.0",
    "run-sequence": "^1.0.1",
    "underscore": "^1.7.0"
  },
  "devDependencies": {
    "gulp": "^3.8.8"
  },
  "readme": "# Laravel Elixir\n\n- [Introduction](#introduction)\n- [Installation & Setup](#installation)\n- [Usage](#usage)\n- [Gulp](#gulp)\n- [Directory Defaults](#defaults)\n- [Extensions](#extensions)\n\n<a name=\"introduction\"></a>\n## Introduction\n\nLaravel Elixir provides a clean, fluent API for defining some basic [Gulp](http://gulpjs.com) tasks for your\nLaravel application. Elixir supports several common CSS, JavaScript and even testing tools!\n\n\n<a name=\"installation\"></a>\n## Installation & Setup\n\n### Installing Node\n\nBefore triggering Elixir, you must first ensure that Node.js is installed on your machine.\n\n    node -v\n\nBy default, Laravel Homestead includes everything you need; however, if you aren't using Vagrant, then you\ncan easily install Node by visiting [nodejs.org](http://nodejs.org), and clicking install. Don't worry, it's\nquick and easy!\n\n### Gulp\n\nNext, you'll want to pull in [Gulp](http://gulpjs.com) globally, like so:\n\n    npm install --global gulp\n\n### Laravel Elixir\n\nThe only remaining step is to install Elixir! With a new install of Laravel, you'll find a `package.json` file in the root. You may\ninstall the dependencies it references by running:\n\n    npm install\n\n<a name=\"usage\"></a>\n## Usage\n\nNow that you've installed Elixir, you'll be compiling, concatenating, and watching in no time!\n\n#### Compile Less\n\n    elixir(function(mix) {\n        mix.less(\"app.less\");\n    });\n\n#### Compile Sass\n\n    elixir(function(mix) {\n        mix.sass(\"app.scss\");\n    });\n\n#### Compile CoffeeScript\n\n    elixir(function(mix) {\n        mix.coffee();\n    });\n\n#### Compile All Less and CoffeeScript\n\n    elixir(function(mix) {\n        mix.less()\n           .coffee();\n    });\n\n#### Trigger PHPUnit Tests\n\n    elixir(function(mix) {\n        mix.phpUnit();\n    });\n\n#### Trigger PHPSpec Tests\n\n    elixir(function(mix) {\n        mix.phpSpec();\n    });\n\n#### Combine Stylesheets\n\n    elixir(function(mix) {\n        mix.styles([\n            \"css/normalize.css\",\n            \"css/main.css\"\n        ]);\n    });\n\nThis will assume that the `public/` folder is the base directory.\n\n#### Combine All Styles in a Directory\n\n    elixir(function(mix) {\n        mix.stylesIn(\"public/css\");\n    });\n\n#### Combine Scripts\n\n    elixir(function(mix) {\n        mix.scripts([\n            \"js/jquery.js\",\n            \"js/app.js\"\n        ]);\n    });\n\n#### Combine All Scripts in a Directory\n\n    elixir(function(mix) {\n        mix.scriptsIn(\"resources/assets/scripts\");\n    });\n\n#### Combine Multiple Sets of Scripts\n\n    elixir(function(mix) {\n        mix.scripts(['js/jquery.js', 'js/main.js'])\n           .scripts(['js/forum.js', 'js/threads.js']);\n    });\n\n#### Version/Hash a File\n\n    elixir(function(mix) {\n        mix.version(\"css/all.css\");\n    });\n\nThis will append a unique hash to the filename, allowing for cache-busting. Perhaps something like: `all-16d570a7.css`.\n\nWithin your views, you may use the `elixir()` function to load the appropriately hashed asset. Here's an example:\n\n    <link rel=\"stylesheet\" href=\"{{ elixir(\"css/all.css\") }}\">\n\nBehind the scenes, the `elixir()` function will determine the name of the hashed file that should be included.\n\n#### Copy a File to a New Location\n\n    elixir(function(mix) {\n        mix.copy('vendor/foo/bar.css', 'public/css/bar.css');\n    });\n\n#### Copy an Entire Directory to a New Location\n\n    elixir(function(mix) {\n        mix.copy('vendor/package/views', 'resources/views');\n    });\n\n#### Put It All Together\n\n    elixir(function(mix) {\n        mix.less(\"app.less\")\n           .coffee()\n           .phpUnit()\n           .version(\"css/bootstrap.css\");\n    });\n\n\n<a name=\"gulp\"></a>\n## Gulp\n\nNow that you've told Elixir which tasks to execute, you only need to trigger Gulp from the command line.\n\n#### Execute All Registered Tasks Once\n\n    gulp\n\n#### Watch Assets for Changes\n\n    gulp watch\n\n#### Watch Tests and PHP Classes for Changes\n\n    gulp tdd\n\n> **Note:** All tasks will assume a development environment, and will exclude minification. For production, use `gulp --production`.\n\n<a name=\"defaults\"></a>\n## Directory Defaults\n\nWhile Elixir will assume the default Laravel 5 directory structure, it's possible that you'd prefer to put your assets, styles, and scripts within a different location. No problem!\n\nCreate a `elixir.json` file within the root of your project, and update the necessary paths as needed.\n\n```\n{\n    \"assetsDir\": \"app/assets/\",\n\n    \"cssOutput\": \"public/css/\",\n\n    \"jsOutput\": \"public/js/\"\n}\n```\n\n- **`assetsDir`**: The path to the base directory for Sass, Less, CoffeeScript, etc.\n- **`cssOutput`**: The path to where compiled CSS should be saved.\n- **`jsOutput`**: The path to where compiled JavaScript should be saved.\n\n<a name=\"extensions\"></a>\n## Extensions\n\nYou can even create your own Gulp tasks, and hook them into Elixir. Imagine that you want to add a fun task that\n uses the Terminal to verbally notify you with some message. Here's what that might look like:\n\n     var elixir = require(\"laravel-elixir\");\n     var gulp = require(\"gulp\");\n     var shell = require(\"gulp-shell\");\n\n     elixir.extend(\"message\", function(message) {\n\n         gulp.task(\"say\", function() {\n             gulp.src(\"\").pipe(shell(\"say \" + message));\n         });\n\n         return this.queueTask(\"say\");\n\n     });\n\nNotice that we `extend` Elixir's API by passing the key that we will use within our Gulpfile, as well as a callback function that will create the Gulp task.\n\nIf you want your custom task to be monitored, then register a watcher as well.\n\n    this.registerWatcher(\"message\", \"**/*.php\");\n\nThis lines designates that when any file that matches the regex, `**/*.php` is modified, we want to trigger the `message` task.\n\nThat's it! You may either place this at the top of your Gulpfile, or instead extract it to a custom tasks file. If you\nchoose the latter approach, simple require it into your Gulpfile, like so:\n\n    require(\"./custom-tasks\")\n\nYou're done! Now, you can mix it in.\n\n    elixir(function(mix) {\n        mix.message(\"Tea, Earl Grey, Hot\");\n    });\n\nWith this addition, each time you trigger Gulp, Picard will request some tea.\n\n### Available Extensions\n\nYou'll find a number of Elixir extensions at [npmjs.org](https://www.npmjs.org/search?q=laravel-elixir), under the \"laravel-elixir-*\" namespace.\n\n- [Stylus](https://www.npmjs.org/package/laravel-elixir-stylus)\n- [Codeception](https://www.npmjs.org/package/laravel-elixir-codeception)\n- [Browserify](https://www.npmjs.org/package/laravel-elixir-browserify)\n- [Jade](https://www.npmjs.org/package/laravel-elixir-jade)\n- [Bower](https://www.npmjs.org/package/laravel-elixir-bower)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/laravel/elixir/issues"
  },
  "_id": "laravel-elixir@0.10.1",
  "_from": "laravel-elixir@*"
}
